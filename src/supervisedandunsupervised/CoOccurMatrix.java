/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package supervisedandunsupervised;

import edu.uci.ics.jung.algorithms.layout.KKLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.SparseMultigraph;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.ScrollPane;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFrame;
import org.apache.commons.collections15.Transformer;

/**
 *
 * @author Elcot
 */
public class CoOccurMatrix extends javax.swing.JFrame {

    /**
     * Creates new form CoOccurMatrix
     */
    
    public static ArrayList digraph=new ArrayList();
    
    Graph<String, String> g;
    
    public CoOccurMatrix() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Co-Occurence Matrix (X) with Occurence Vector (N)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Generate Co-Occurence Matrix (X) with Occurence Vector (N)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Generated Co-Occurence Digraph G(V,E)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Spreading Activation & Rule Generation");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList allReviews=MainFrame.allReviews;
        ArrayList sortedSeedWords=CategorySeedWords.newSeedWords;
        Collections.sort(sortedSeedWords);
        
        String header="X";
        for(int i=0;i<sortedSeedWords.size();i++)
        {
            String s=sortedSeedWords.get(i).toString().toLowerCase().trim();
            header=header+"\t"+s.trim();
        }
        header=header+"\t-->\t"+"N";
        
        System.out.println("Total: "+sortedSeedWords.size());
        String ro="";
        for(int i=0;i<sortedSeedWords.size();i++)
        {
            String s=sortedSeedWords.get(i).toString().toLowerCase().trim();
            ro=ro+s.trim()+"\t";
            System.out.println(i+": "+s.trim());
            
            String ed="";
            
            for(int j=0;j<sortedSeedWords.size();j++)
            {
                String s1=sortedSeedWords.get(j).toString().toLowerCase().trim();
                
                int val=0;                
                if(!(s.trim().equals(s1.trim())))
                {
                    for(int k=0;k<allReviews.size();k++)
                    {
                        String rev=allReviews.get(k).toString().trim().replaceAll("[^\\w\\s]", "");     // replace all symbols
                        if(rev.trim().contains(s.trim()))
                        {
                            //System.out.println(rev.trim());
                            //System.out.println(s.trim());
                            
                            String su[]=rev.trim().split(s.trim());
                            //System.out.println(su.length);
                            if(su.length==2)
                            {
                                String sub=su[1].trim();
                                if(sub.trim().contains(s1.trim()))
                                {
                                    val++;
                                    if(!(ed.contains(s1.trim())))
                                    {
                                        ed=ed+s1.trim()+",";
                                    }
                                }
                            }
                        }
                    }
                }  
                else
                {
                    val=0;
                }
                ro=ro+val+"\t";                                
            }
            
            int N=0;
            for(int k=0;k<allReviews.size();k++)
            {
                String rev=allReviews.get(k).toString().trim().replaceAll("[^\\w\\s]", "");     // replace all symbols
                if(rev.trim().contains(s.trim()))
                {
                    N++;
                }
            }            
            ro=ro+"-->\t"+N+"\n"; 
            
            String edges="-";
            if(!(ed.trim().equals("")))
            {
                edges=ed.substring(0,ed.lastIndexOf(','));
            }
            digraph.add(s.trim()+"#"+edges.trim()+"#"+N);
        }
        String allRows=ro.substring(0,ro.lastIndexOf('\n'));
        jTextArea1.setText(header.trim()+"\n"+allRows.trim());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                
        g = new SparseMultigraph<String, String>();
        
        System.out.println("Digraph");
        for(int i=0;i<digraph.size();i++)
        {
            String s=digraph.get(i).toString().trim(); 
            System.out.println(s.trim());
            String sp[]=s.trim().split("#");
            g.addVertex(sp[0].trim());
        }
        
        int li=0;
        for(int i=0;i<digraph.size();i++)
        {
            String s=digraph.get(i).toString().trim(); 
            String sp[]=s.trim().split("#");
            if(!(sp[1].trim().contains("-")))
            {
                if(sp[1].trim().contains(","))
                {
                    String spk[]=sp[1].trim().split(",");
                    for(int j=0;j<spk.length;j++)
                    {
                        li++;
                        g.addEdge("L"+(li), sp[0].trim(), spk[j].trim());
                    }
                }
                else
                {
                    li++;
                    g.addEdge("L"+(li), sp[0].trim(), sp[1].trim());
                }
            }
        }        
        
        Layout<String, String> layout = new KKLayout<String, String>(g);              
        layout.setSize(new Dimension(1300,700)); // sets the initial size of the layout space
        // The BasicVisualizationServer<V,E> is parameterized by the vertex and edge types        
        layout.lock("",true);        
        
        BasicVisualizationServer<String,String> vv = new BasicVisualizationServer<String,String>(layout);
        vv.setPreferredSize(new Dimension(1300,700)); //Sets the viewing area size
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller()); 
        //vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());        
        vv.getRenderContext().setLabelOffset(80);
	vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);    
        
        double amount = 1.0;    // Or negative to zoom out.
        ScalingControl scaler = new CrossoverScalingControl();
        scaler.scale(vv, amount > 0 ? 1.1f : 1 / 1.1f, vv.getCenter());
        
        // Setup up a new vertex to paint transformer...
        Transformer<String,Paint> vertexPaint = new Transformer<String,Paint>() {
            public Paint transform(String i) {
                return Color.GREEN;
            }
        };

        vv.getRenderContext().setVertexFillPaintTransformer(vertexPaint);
        
        Transformer<String,Shape> vertexSize = new Transformer<String,Shape>(){
            public Shape transform(String i){
                //Ellipse2D circle = new Ellipse2D.Double(-15, -15, 30, 30);
                double width = i.length() * 10.0;
                Ellipse2D circle = new Ellipse2D.Double(-(width/2), -12.5, width, 25);
                return circle;
            }
        };
        vv.getRenderContext().setVertexShapeTransformer(vertexSize); 
        
        /*Transformer<Context<Graph<String, String>, String>, Shape> edgeTransformer = new Transformer<Context<Graph<String, String>, String>, Shape>(){
        @Override
        public Shape transform(Context<Graph<String, String>, String> graphStringContext)
        {
            return (new Line2D.Double());
        }
    };        
        vv.getRenderContext().setEdgeShapeTransformer(edgeTransformer);*/
        
        JFrame frame = new JFrame("Co-Occurence Digraph G(V,E)");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ScrollPane scrollPane=new ScrollPane();
        scrollPane.setSize(1300,700);
        scrollPane.add(vv);
        frame.getContentPane().add(scrollPane); 
        frame.pack();
        frame.setVisible(true);
        
                        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        SpreadingandRule sarg=new SpreadingandRule();
        sarg.setTitle("Spreading Activation & Rule Generation");
        sarg.setVisible(true);
        sarg.setResizable(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoOccurMatrix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoOccurMatrix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoOccurMatrix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoOccurMatrix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoOccurMatrix().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
